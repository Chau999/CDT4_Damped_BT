df_btdata <- btdata(df_4_col,return_graph=FALSE)
df_mat <- as.matrix(df_btdata$wins)
avg_wins <- sum(df_mat)/nrow(df_mat)
# modify normalised rank vec such that it has correct length
# this counts for new boats that haven't been observed before
rank_vec_norm[which(rownames(df_mat)%in% rownames(alphabet_df))] <- rank_vec_norm
rank_vec_norm[which(!rownames(df_mat)%in% rownames(alphabet_df))] <- mean(rank_vec_norm)
# avoid diving by zero
col_sums <- colSums(df_mat)
col_sums[col_sums==0] <- 1
# create the transition matrix and add the teleportation, then renormalies
df_mat_norm <- t(t(df_mat)/col_sums)
df_mat_norm<- delta *df_mat_norm + (1-delta)*rank_vec_norm
df_teleport_mat <- t(t(df_mat_norm)*col_sums)
df_teleport_mat <- as.matrix(df_teleport_mat)
return(df_teleport_mat)
}
method_comparison <- function(years=5, torpids=FALSE, draw=TRUE, cutoff=50, logPlot=TRUE, rankPlot=TRUE, delta_vec = 0.85, gender='m'){
pad_rank_mat <- matrix(0,nrow = length(delta_vec),ncol=years)
tele_rank_mat <-matrix(0,nrow=length(delta_vec), ncol=years)
no_pad_rank_vec <- rep(0,years)
comparison_counts <- 0
nuffin <- rep(0,years)
rownames(pad_rank_mat)<- delta_vec
rownames(tele_rank_mat) <- delta_vec
start = 2018-years
names(nuffin)<- seq(start+1,start+years)
colnames(pad_rank_mat)<- seq(start+1,start+years)
colnames(tele_rank_mat) <- seq(start+1,start+years)
for (delta in delta_vec){
paste0('Now looking at delta=',delta)
pad_prob_vec <- c()
no_pad_prob_vec <- c()
tele_prob_vec<-c()
start = 2018-years
for (from_year in seq(start+1, start + years)){
print(from_year)
# get the unppadded data frame
no_pad_df <- dataGather(years=5,from=from_year,cutoff=cutoff, gender=gender,torpids=torpids)
no_pad_4_col <- codes_to_counts(no_pad_df,c('W1','W2','D'))
no_pad_btdata <- btdata(no_pad_4_col,return_graph=FALSE)
no_pad_fit <- btfit(no_pad_btdata, a = 1.1)
# get the padded win/loss matrix
pad_row_df <- pad_row(years=5,from=from_year, torpids=torpids, draw=draw, cutoff=cutoff, plot=FALSE, delta = delta, gender)
pad_btdata <- btdata(pad_row_df)
pad_fit <- btfit(pad_btdata, a=1.1)
# apply teleportation to the unpadded results
tele_wins<- teleporter(no_pad_df,delta,year=from_year-5,gender, torpids=torpids)
tele_btdata <- btdata(tele_wins)
tele_fit <- btfit(tele_btdata,a=1.1)
# get pi coefficients
pad_pi <- exp(coef(pad_fit))
no_pad_pi <- exp(coef(no_pad_fit))
coeffs<- coef(tele_fit)
# for some reason coeffs is sometimes a list
if (is.list(coef(tele_fit))){
coeffs <- coef(tele_fit)[[1]]
}
tele_pi <- exp(coeffs)
# observed draw prob, help us choose theta
draw_prob<-sum(no_pad_df[,'outcome']=='D')/nrow(no_pad_df)
theta = 2* draw_prob /(1-draw_prob)
# get new dataset to test predictive abilities of our models, remove data points for which we observe a new boat
current_df <- dataGather(years=1,from=from_year+1,cutoff=cutoff, gender=gender,torpids=torpids)
boatNames <- rownames(pad_row_df)
current_df <- current_df[current_df[,'Boat_1'] %in% boatNames & current_df[,'Boat_2'] %in% boatNames,]
# summed log probabilities for the three methods
log_prob_pad <- sum(sapply(seq_len(nrow(current_df)), function(x) log(prob_generator(pad_pi[current_df[x,"Boat_1"]],
pad_pi[current_df[x,'Boat_2']],
current_df[x,'outcome'],
theta))))
log_prob_no_pad <- sum(sapply(seq_len(nrow(current_df)), function(x) log(prob_generator(no_pad_pi[current_df[x,"Boat_1"]],
no_pad_pi[current_df[x,'Boat_2']],
current_df[x,'outcome'],
theta))))
log_prob_tele <- sum(sapply(seq_len(nrow(current_df)), function(x) log(prob_generator(tele_pi[current_df[x,"Boat_1"]],
tele_pi[current_df[x,'Boat_2']],
current_df[x,'outcome'],
theta))))
pad_prob_vec <- c(pad_prob_vec, log_prob_pad)
no_pad_prob_vec <- c(no_pad_prob_vec,log_prob_no_pad)
tele_prob_vec <- c(tele_prob_vec , log_prob_tele)
log_mat <- matrix(c(pad_prob_vec,no_pad_prob_vec,tele_prob_vec),ncol=3)
if (rankPlot==TRUE){
# organise the data from each year before adding to df
#print(paste0('Currently downloading data from the year: ', year))
year_df <- yeardf(from_year, sex=gender,torp=FALSE)
year_df$ranking <- seq_len(nrow(year_df))
year_df$finalRanking <- sapply(seq_len(nrow(year_df)),function(x) -sum(year_df[x,1:4])+x)
final_rank_pad_vec <- year_df[names(sort(pad_pi,decreasing = TRUE)),'finalRanking']
addition_pad <- sum(!is.na(final_rank_pad_vec))
final_rank_pad_vec[is.na(final_rank_pad_vec)]=seq_len(length(pad_pi))[is.na(final_rank_pad_vec)]
final_rank_tele_vec <- year_df[names(sort(tele_pi,decreasing=TRUE)),'finalRanking']
addition_tele <- sum(!is.na(final_rank_tele_vec))
final_rank_tele_vec[is.na(final_rank_tele_vec)]=seq_len(length(tele_pi))[is.na(final_rank_tele_vec)]
final_rank_no_pad_vec <- year_df[names(sort(no_pad_pi,decreasing=TRUE)),'finalRanking']
addition_no_pad <- sum(!is.na(final_rank_no_pad_vec))
final_rank_no_pad_vec[is.na(final_rank_no_pad_vec)]=seq_len(length(no_pad_pi))[is.na(final_rank_no_pad_vec)]
pad_rank_mat[toString(delta),toString(from_year)]<-sum(abs(seq_len(length(pad_pi))-final_rank_pad_vec))
tele_rank_mat[toString(delta),toString(from_year)]<-sum(abs(seq_len(length(tele_pi))-final_rank_tele_vec))
no_pad_rank_vec[toString(from_year)]<- sum(abs(seq_len(length(no_pad_pi))-final_rank_no_pad_vec))
relevant_names <- names(tele_pi)[names(tele_pi)%in% rownames(year_df)]
nuffin[toString(from_year)] <- sum(abs(year_df[relevant_names,'ranking']-year_df[relevant_names,'finalRanking']))
if (delta==delta_vec[1] ){
comparison_counts <-comparison_counts+addition_tele
}
}
##################################################################
}
if (logPlot==TRUE){
name <- paste0(gender,delta*100,'comparison.pdf')
pdf(name,width=8,height=5,paper='special')
plot(seq(start+1,start+years), log_mat[,1],'b', col='red',ylim=c(min(log_mat),max(log_mat)),xlab='year',ylab='Log-likelihood',xaxt='n')
axis(1, at=seq(2008,2018,by=1), las=2)
lines(seq(start+1,start+years),log_mat[,2],'b',col='blue')
lines(seq(start+1,start+years),log_mat[,3],'b',col='green')
legend('top',c('Padding','MAP','Teleport'),col=c('red','blue','green'),lty=1)
dev.off()
}
}
if (rankPlot==TRUE){
pad_rank_vec<-rowSums(pad_rank_mat)/comparison_counts
tele_rank_vec <- rowSums(tele_rank_mat)/comparison_counts
baseline <- sum(no_pad_rank_vec)/comparison_counts
nuffin_baseline <-sum(nuffin)/comparison_counts
name <- paste0(gender,'deltacomparison.pdf')
pdf(name,width=8,height=5,paper='special')
plot(delta_vec, pad_rank_vec,'b', col='red',ylim=c(min(c(pad_rank_vec,tele_rank_vec,nuffin_baseline)),max(c(pad_rank_vec,tele_rank_vec,nuffin_baseline))),xlab='Delta',ylab='Average rank error')
lines(delta_vec,tele_rank_vec,'b',col='blue')
abline(h=nuffin_baseline, col='darkgreen')
legend('topleft',c('Padding','Teleport', 'No Change'),col=c('red','blue','darkgreen'),lty=1)
dev.off()
}
return(comparison_counts)
}
method_comparison <- function(years=5, torpids=FALSE, draw=TRUE, cutoff=50, logPlot=TRUE, rankPlot=TRUE, delta_vec = 0.85, gender='m'){
pad_rank_mat <- matrix(0,nrow = length(delta_vec),ncol=years)
tele_rank_mat <-matrix(0,nrow=length(delta_vec), ncol=years)
no_pad_rank_vec <- rep(0,years)
comparison_counts <- 0
nuffin <- rep(0,years)
rownames(pad_rank_mat)<- delta_vec
rownames(tele_rank_mat) <- delta_vec
start = 2018-years
names(nuffin)<- seq(start+1,start+years)
colnames(pad_rank_mat)<- seq(start+1,start+years)
colnames(tele_rank_mat) <- seq(start+1,start+years)
for (delta in delta_vec){
paste0('Now looking at delta=',delta)
pad_prob_vec <- c()
no_pad_prob_vec <- c()
tele_prob_vec<-c()
start = 2018-years
for (from_year in seq(start+1, start + years)){
print(from_year)
# get the unppadded data frame
no_pad_df <- dataGather(years=5,from=from_year,cutoff=cutoff, gender=gender,torpids=torpids)
no_pad_4_col <- codes_to_counts(no_pad_df,c('W1','W2','D'))
no_pad_btdata <- btdata(no_pad_4_col,return_graph=FALSE)
no_pad_fit <- btfit(no_pad_btdata, a = 1.1)
# get the padded win/loss matrix
pad_row_df <- pad_row(years=5,from=from_year, torpids=torpids, draw=draw, cutoff=cutoff, plot=FALSE, delta = delta, gender)
pad_btdata <- btdata(pad_row_df)
pad_fit <- btfit(pad_btdata, a=1.1)
# apply teleportation to the unpadded results
tele_wins<- teleporter(no_pad_df,delta,year=from_year-5,gender, torpids=torpids)
tele_btdata <- btdata(tele_wins)
tele_fit <- btfit(tele_btdata,a=1.1)
# get pi coefficients
pad_pi <- exp(coef(pad_fit))
no_pad_pi <- exp(coef(no_pad_fit))
coeffs<- coef(tele_fit)
# for some reason coeffs is sometimes a list
if (is.list(coef(tele_fit))){
coeffs <- coef(tele_fit)[[1]]
}
tele_pi <- exp(coeffs)
# observed draw prob, help us choose theta
draw_prob<-sum(no_pad_df[,'outcome']=='D')/nrow(no_pad_df)
theta = 2* draw_prob /(1-draw_prob)
# get new dataset to test predictive abilities of our models, remove data points for which we observe a new boat
current_df <- dataGather(years=1,from=from_year+1,cutoff=cutoff, gender=gender,torpids=torpids)
boatNames <- rownames(pad_row_df)
current_df <- current_df[current_df[,'Boat_1'] %in% boatNames & current_df[,'Boat_2'] %in% boatNames,]
# summed log probabilities for the three methods
log_prob_pad <- sum(sapply(seq_len(nrow(current_df)), function(x) log(prob_generator(pad_pi[current_df[x,"Boat_1"]],
pad_pi[current_df[x,'Boat_2']],
current_df[x,'outcome'],
theta))))
log_prob_no_pad <- sum(sapply(seq_len(nrow(current_df)), function(x) log(prob_generator(no_pad_pi[current_df[x,"Boat_1"]],
no_pad_pi[current_df[x,'Boat_2']],
current_df[x,'outcome'],
theta))))
log_prob_tele <- sum(sapply(seq_len(nrow(current_df)), function(x) log(prob_generator(tele_pi[current_df[x,"Boat_1"]],
tele_pi[current_df[x,'Boat_2']],
current_df[x,'outcome'],
theta))))
pad_prob_vec <- c(pad_prob_vec, log_prob_pad)
no_pad_prob_vec <- c(no_pad_prob_vec,log_prob_no_pad)
tele_prob_vec <- c(tele_prob_vec , log_prob_tele)
log_mat <- matrix(c(pad_prob_vec,no_pad_prob_vec,tele_prob_vec),ncol=3)
if (rankPlot==TRUE){
# organise the data from each year before adding to df
#print(paste0('Currently downloading data from the year: ', year))
year_df <- yeardf(from_year, sex=gender,torp=FALSE)
year_df$ranking <- seq_len(nrow(year_df))
year_df$finalRanking <- sapply(seq_len(nrow(year_df)),function(x) -sum(year_df[x,1:4])+x)
final_rank_pad_vec <- year_df[names(sort(pad_pi,decreasing = TRUE)),'finalRanking']
addition_pad <- sum(!is.na(final_rank_pad_vec))
final_rank_pad_vec[is.na(final_rank_pad_vec)]=seq_len(length(pad_pi))[is.na(final_rank_pad_vec)]
final_rank_tele_vec <- year_df[names(sort(tele_pi,decreasing=TRUE)),'finalRanking']
addition_tele <- sum(!is.na(final_rank_tele_vec))
final_rank_tele_vec[is.na(final_rank_tele_vec)]=seq_len(length(tele_pi))[is.na(final_rank_tele_vec)]
final_rank_no_pad_vec <- year_df[names(sort(no_pad_pi,decreasing=TRUE)),'finalRanking']
addition_no_pad <- sum(!is.na(final_rank_no_pad_vec))
final_rank_no_pad_vec[is.na(final_rank_no_pad_vec)]=seq_len(length(no_pad_pi))[is.na(final_rank_no_pad_vec)]
pad_rank_mat[toString(delta),toString(from_year)]<-sum(abs(seq_len(length(pad_pi))-final_rank_pad_vec))
tele_rank_mat[toString(delta),toString(from_year)]<-sum(abs(seq_len(length(tele_pi))-final_rank_tele_vec))
no_pad_rank_vec[toString(from_year)]<- sum(abs(seq_len(length(no_pad_pi))-final_rank_no_pad_vec))
relevant_names <- names(tele_pi)[names(tele_pi)%in% rownames(year_df)]
nuffin[toString(from_year)] <- sum(abs(year_df[relevant_names,'ranking']-year_df[relevant_names,'finalRanking']))
if (delta==delta_vec[1] ){
comparison_counts <-comparison_counts+addition_tele
}
}
##################################################################
}
if (logPlot==TRUE){
name <- paste0(gender,delta*100,'comparison.pdf')
pdf(name,width=8,height=5,paper='special')
plot(seq(start+1,start+years), log_mat[,1],'b', col='red',ylim=c(min(log_mat),max(log_mat)),xlab='year',ylab='Log-likelihood',xaxt='n')
axis(1, at=seq(2008,2018,by=1), las=2)
lines(seq(start+1,start+years),log_mat[,2],'b',col='blue')
lines(seq(start+1,start+years),log_mat[,3],'b',col='green')
legend('top',c('Padding','MAP','Teleport'),col=c('red','blue','green'),lty=1)
dev.off()
}
}
if (rankPlot==TRUE){
pad_rank_vec<-rowSums(pad_rank_mat)/comparison_counts
tele_rank_vec <- rowSums(tele_rank_mat)/comparison_counts
baseline <- sum(no_pad_rank_vec)/comparison_counts
nuffin_baseline <-sum(nuffin)/comparison_counts
name <- paste0(gender,'geomdeltacomparison.pdf')
pdf(name,width=8,height=5,paper='special')
plot(delta_vec, pad_rank_vec,'b', col='red',ylim=c(min(c(pad_rank_vec,tele_rank_vec,nuffin_baseline)),max(c(pad_rank_vec,tele_rank_vec,nuffin_baseline))),xlab='Delta',ylab='Average rank error')
lines(delta_vec,tele_rank_vec,'b',col='blue')
abline(h=nuffin_baseline, col='darkgreen')
legend('topleft',c('Padding','Teleport', 'No Change'),col=c('red','blue','darkgreen'),lty=1)
dev.off()
}
return(comparison_counts)
}
a <- method_comparison(years=10,logPlot=FALSE,delta_vec=seq(0.4,0.9,by=0.05,gender = 'm')
a <- method_comparison(years=10,logPlot=FALSE,delta_vec=seq(0.4,0.9,by=0.05),gender = 'm')
teleporter <- function(df,delta,year,gender,torpids){
# df is the results that we create into a wins matrix
# 1-delta is the teleportation probability
# year is the year at start of df
# gather rankings at beginning the results depicted in df
year_df<-yeardf(year, sex= gender,torp = torpids)
year_df$ranking <- seq_len(nrow(year_df))
alphabet_df <- year_df[sort(rownames(year_df)),]
df_boatnames <- unique(c(df[,1],df[,2]))
# create rankings vector in alphabetical order
temp_rank_vec <- sort(alphabet_df[rownames(alphabet_df) %in% df_boatnames ,]$ranking, index.return=TRUE)
rank_vec<-temp_rank_vec$ix
rank_vec[temp_rank_vec$ix] <- 0.975(seq_len(length(rank_vec)))
rank_vec_norm <- rank_vec/sum(rank_vec)
# change df format into a matrix of wins/losses
df_4_col <- codes_to_counts(df,c('W1','W2','D'))
df_btdata <- btdata(df_4_col,return_graph=FALSE)
df_mat <- as.matrix(df_btdata$wins)
avg_wins <- sum(df_mat)/nrow(df_mat)
# modify normalised rank vec such that it has correct length
# this counts for new boats that haven't been observed before
rank_vec_norm[which(rownames(df_mat)%in% rownames(alphabet_df))] <- rank_vec_norm
rank_vec_norm[which(!rownames(df_mat)%in% rownames(alphabet_df))] <- mean(rank_vec_norm)
# avoid diving by zero
col_sums <- colSums(df_mat)
col_sums[col_sums==0] <- 1
# create the transition matrix and add the teleportation, then renormalies
df_mat_norm <- t(t(df_mat)/col_sums)
df_mat_norm<- delta *df_mat_norm + (1-delta)*rank_vec_norm
df_teleport_mat <- t(t(df_mat_norm)*col_sums)
df_teleport_mat <- as.matrix(df_teleport_mat)
return(df_teleport_mat)
}
a <- method_comparison(years=5,logPlot=FALSE,delta_vec=c(0.7,0.85),gender = 'm')
teleporter <- function(df,delta,year,gender,torpids){
# df is the results that we create into a wins matrix
# 1-delta is the teleportation probability
# year is the year at start of df
# gather rankings at beginning the results depicted in df
year_df<-yeardf(year, sex= gender,torp = torpids)
year_df$ranking <- seq_len(nrow(year_df))
alphabet_df <- year_df[sort(rownames(year_df)),]
df_boatnames <- unique(c(df[,1],df[,2]))
# create rankings vector in alphabetical order
temp_rank_vec <- sort(alphabet_df[rownames(alphabet_df) %in% df_boatnames ,]$ranking, index.return=TRUE)
rank_vec<-temp_rank_vec$ix
rank_vec[temp_rank_vec$ix] <- 0.975^(seq_len(length(rank_vec)))
rank_vec_norm <- rank_vec/sum(rank_vec)
# change df format into a matrix of wins/losses
df_4_col <- codes_to_counts(df,c('W1','W2','D'))
df_btdata <- btdata(df_4_col,return_graph=FALSE)
df_mat <- as.matrix(df_btdata$wins)
avg_wins <- sum(df_mat)/nrow(df_mat)
# modify normalised rank vec such that it has correct length
# this counts for new boats that haven't been observed before
rank_vec_norm[which(rownames(df_mat)%in% rownames(alphabet_df))] <- rank_vec_norm
rank_vec_norm[which(!rownames(df_mat)%in% rownames(alphabet_df))] <- mean(rank_vec_norm)
# avoid diving by zero
col_sums <- colSums(df_mat)
col_sums[col_sums==0] <- 1
# create the transition matrix and add the teleportation, then renormalies
df_mat_norm <- t(t(df_mat)/col_sums)
df_mat_norm<- delta *df_mat_norm + (1-delta)*rank_vec_norm
df_teleport_mat <- t(t(df_mat_norm)*col_sums)
df_teleport_mat <- as.matrix(df_teleport_mat)
return(df_teleport_mat)
}
a <- method_comparison(years=5,logPlot=FALSE,delta_vec=c(0.7,0.85),gender = 'm')
teleporter <- function(df,delta,year,gender,torpids){
# df is the results that we create into a wins matrix
# 1-delta is the teleportation probability
# year is the year at start of df
# gather rankings at beginning the results depicted in df
year_df<-yeardf(year, sex= gender,torp = torpids)
year_df$ranking <- seq_len(nrow(year_df))
alphabet_df <- year_df[sort(rownames(year_df)),]
df_boatnames <- unique(c(df[,1],df[,2]))
# create rankings vector in alphabetical order
temp_rank_vec <- sort(alphabet_df[rownames(alphabet_df) %in% df_boatnames ,]$ranking, index.return=TRUE)
rank_vec<-temp_rank_vec$ix
rank_vec[temp_rank_vec$ix] <- 0.99^(seq_len(length(rank_vec)))
rank_vec_norm <- rank_vec/sum(rank_vec)
# change df format into a matrix of wins/losses
df_4_col <- codes_to_counts(df,c('W1','W2','D'))
df_btdata <- btdata(df_4_col,return_graph=FALSE)
df_mat <- as.matrix(df_btdata$wins)
avg_wins <- sum(df_mat)/nrow(df_mat)
# modify normalised rank vec such that it has correct length
# this counts for new boats that haven't been observed before
rank_vec_norm[which(rownames(df_mat)%in% rownames(alphabet_df))] <- rank_vec_norm
rank_vec_norm[which(!rownames(df_mat)%in% rownames(alphabet_df))] <- mean(rank_vec_norm)
# avoid diving by zero
col_sums <- colSums(df_mat)
col_sums[col_sums==0] <- 1
# create the transition matrix and add the teleportation, then renormalies
df_mat_norm <- t(t(df_mat)/col_sums)
df_mat_norm<- delta *df_mat_norm + (1-delta)*rank_vec_norm
df_teleport_mat <- t(t(df_mat_norm)*col_sums)
df_teleport_mat <- as.matrix(df_teleport_mat)
return(df_teleport_mat)
}
a <- method_comparison(years=5,logPlot=FALSE,delta_vec=c(0.7,0.85),gender = 'm')
teleporter <- function(df,delta,year,gender,torpids){
# df is the results that we create into a wins matrix
# 1-delta is the teleportation probability
# year is the year at start of df
# gather rankings at beginning the results depicted in df
year_df<-yeardf(year, sex= gender,torp = torpids)
year_df$ranking <- seq_len(nrow(year_df))
alphabet_df <- year_df[sort(rownames(year_df)),]
df_boatnames <- unique(c(df[,1],df[,2]))
# create rankings vector in alphabetical order
temp_rank_vec <- sort(alphabet_df[rownames(alphabet_df) %in% df_boatnames ,]$ranking, index.return=TRUE)
rank_vec<-temp_rank_vec$ix
rank_vec[temp_rank_vec$ix] <- rev(seq_len(length(rank_vec)))
rank_vec_norm <- rank_vec/sum(rank_vec)
# change df format into a matrix of wins/losses
df_4_col <- codes_to_counts(df,c('W1','W2','D'))
df_btdata <- btdata(df_4_col,return_graph=FALSE)
df_mat <- as.matrix(df_btdata$wins)
avg_wins <- sum(df_mat)/nrow(df_mat)
# modify normalised rank vec such that it has correct length
# this counts for new boats that haven't been observed before
rank_vec_norm[which(rownames(df_mat)%in% rownames(alphabet_df))] <- rank_vec_norm
rank_vec_norm[which(!rownames(df_mat)%in% rownames(alphabet_df))] <- mean(rank_vec_norm)
# avoid diving by zero
col_sums <- colSums(df_mat)
col_sums[col_sums==0] <- 1
# create the transition matrix and add the teleportation, then renormalies
df_mat_norm <- t(t(df_mat)/col_sums)
df_mat_norm<- delta *df_mat_norm + (1-delta)*rank_vec_norm
df_teleport_mat <- t(t(df_mat_norm)*col_sums)
df_teleport_mat <- as.matrix(df_teleport_mat)
return(df_teleport_mat)
}
a <- method_comparison(years=5,logPlot=FALSE,delta_vec=c(0.7,0.85),gender = 'm')
method_comparison <- function(years=5, torpids=FALSE, draw=TRUE, cutoff=50, logPlot=TRUE, rankPlot=TRUE, delta_vec = 0.85, gender='m'){
pad_rank_mat <- matrix(0,nrow = length(delta_vec),ncol=years)
tele_rank_mat <-matrix(0,nrow=length(delta_vec), ncol=years)
no_pad_rank_vec <- rep(0,years)
comparison_counts <- 0
nuffin <- rep(0,years)
rownames(pad_rank_mat)<- delta_vec
rownames(tele_rank_mat) <- delta_vec
start = 2018-years
names(nuffin)<- seq(start+1,start+years)
colnames(pad_rank_mat)<- seq(start+1,start+years)
colnames(tele_rank_mat) <- seq(start+1,start+years)
for (delta in delta_vec){
paste0('Now looking at delta=',delta)
pad_prob_vec <- c()
no_pad_prob_vec <- c()
tele_prob_vec<-c()
start = 2018-years
for (from_year in seq(start+1, start + years)){
print(from_year)
# get the unppadded data frame
no_pad_df <- dataGather(years=5,from=from_year,cutoff=cutoff, gender=gender,torpids=torpids)
no_pad_4_col <- codes_to_counts(no_pad_df,c('W1','W2','D'))
no_pad_btdata <- btdata(no_pad_4_col,return_graph=FALSE)
no_pad_fit <- btfit(no_pad_btdata, a = 1.1)
# get the padded win/loss matrix
pad_row_df <- pad_row(years=5,from=from_year, torpids=torpids, draw=draw, cutoff=cutoff, plot=FALSE, delta = delta, gender)
pad_btdata <- btdata(pad_row_df)
pad_fit <- btfit(pad_btdata, a=1)
# apply teleportation to the unpadded results
tele_wins<- teleporter(no_pad_df,delta,year=from_year-5,gender, torpids=torpids)
tele_btdata <- btdata(tele_wins)
tele_fit <- btfit(tele_btdata,a=1)
# get pi coefficients
pad_pi <- exp(coef(pad_fit))
no_pad_pi <- exp(coef(no_pad_fit))
coeffs<- coef(tele_fit)
# for some reason coeffs is sometimes a list
if (is.list(coef(tele_fit))){
coeffs <- coef(tele_fit)[[1]]
}
tele_pi <- exp(coeffs)
# observed draw prob, help us choose theta
draw_prob<-sum(no_pad_df[,'outcome']=='D')/nrow(no_pad_df)
theta = 2* draw_prob /(1-draw_prob)
# get new dataset to test predictive abilities of our models, remove data points for which we observe a new boat
current_df <- dataGather(years=1,from=from_year+1,cutoff=cutoff, gender=gender,torpids=torpids)
boatNames <- rownames(pad_row_df)
current_df <- current_df[current_df[,'Boat_1'] %in% boatNames & current_df[,'Boat_2'] %in% boatNames,]
# summed log probabilities for the three methods
log_prob_pad <- sum(sapply(seq_len(nrow(current_df)), function(x) log(prob_generator(pad_pi[current_df[x,"Boat_1"]],
pad_pi[current_df[x,'Boat_2']],
current_df[x,'outcome'],
theta))))
log_prob_no_pad <- sum(sapply(seq_len(nrow(current_df)), function(x) log(prob_generator(no_pad_pi[current_df[x,"Boat_1"]],
no_pad_pi[current_df[x,'Boat_2']],
current_df[x,'outcome'],
theta))))
log_prob_tele <- sum(sapply(seq_len(nrow(current_df)), function(x) log(prob_generator(tele_pi[current_df[x,"Boat_1"]],
tele_pi[current_df[x,'Boat_2']],
current_df[x,'outcome'],
theta))))
pad_prob_vec <- c(pad_prob_vec, log_prob_pad)
no_pad_prob_vec <- c(no_pad_prob_vec,log_prob_no_pad)
tele_prob_vec <- c(tele_prob_vec , log_prob_tele)
log_mat <- matrix(c(pad_prob_vec,no_pad_prob_vec,tele_prob_vec),ncol=3)
if (rankPlot==TRUE){
# organise the data from each year before adding to df
#print(paste0('Currently downloading data from the year: ', year))
year_df <- yeardf(from_year, sex=gender,torp=FALSE)
year_df$ranking <- seq_len(nrow(year_df))
year_df$finalRanking <- sapply(seq_len(nrow(year_df)),function(x) -sum(year_df[x,1:4])+x)
final_rank_pad_vec <- year_df[names(sort(pad_pi,decreasing = TRUE)),'finalRanking']
addition_pad <- sum(!is.na(final_rank_pad_vec))
final_rank_pad_vec[is.na(final_rank_pad_vec)]=seq_len(length(pad_pi))[is.na(final_rank_pad_vec)]
final_rank_tele_vec <- year_df[names(sort(tele_pi,decreasing=TRUE)),'finalRanking']
addition_tele <- sum(!is.na(final_rank_tele_vec))
final_rank_tele_vec[is.na(final_rank_tele_vec)]=seq_len(length(tele_pi))[is.na(final_rank_tele_vec)]
final_rank_no_pad_vec <- year_df[names(sort(no_pad_pi,decreasing=TRUE)),'finalRanking']
addition_no_pad <- sum(!is.na(final_rank_no_pad_vec))
final_rank_no_pad_vec[is.na(final_rank_no_pad_vec)]=seq_len(length(no_pad_pi))[is.na(final_rank_no_pad_vec)]
pad_rank_mat[toString(delta),toString(from_year)]<-sum(abs(seq_len(length(pad_pi))-final_rank_pad_vec))
tele_rank_mat[toString(delta),toString(from_year)]<-sum(abs(seq_len(length(tele_pi))-final_rank_tele_vec))
no_pad_rank_vec[toString(from_year)]<- sum(abs(seq_len(length(no_pad_pi))-final_rank_no_pad_vec))
relevant_names <- names(tele_pi)[names(tele_pi)%in% rownames(year_df)]
nuffin[toString(from_year)] <- sum(abs(year_df[relevant_names,'ranking']-year_df[relevant_names,'finalRanking']))
if (delta==delta_vec[1] ){
comparison_counts <-comparison_counts+addition_tele
}
}
##################################################################
}
if (logPlot==TRUE){
name <- paste0(gender,delta*100,'comparison.pdf')
pdf(name,width=8,height=5,paper='special')
plot(seq(start+1,start+years), log_mat[,1],'b', col='red',ylim=c(min(log_mat),max(log_mat)),xlab='year',ylab='Log-likelihood',xaxt='n')
axis(1, at=seq(2008,2018,by=1), las=2)
lines(seq(start+1,start+years),log_mat[,2],'b',col='blue')
lines(seq(start+1,start+years),log_mat[,3],'b',col='green')
legend('top',c('Padding','MAP','Teleport'),col=c('red','blue','green'),lty=1)
dev.off()
}
}
if (rankPlot==TRUE){
pad_rank_vec<-rowSums(pad_rank_mat)/comparison_counts
tele_rank_vec <- rowSums(tele_rank_mat)/comparison_counts
baseline <- sum(no_pad_rank_vec)/comparison_counts
nuffin_baseline <-sum(nuffin)/comparison_counts
name <- paste0(gender,'deltacomparison.pdf')
pdf(name,width=8,height=5,paper='special')
plot(delta_vec, pad_rank_vec,'b', col='red',ylim=c(min(c(pad_rank_vec,tele_rank_vec,nuffin_baseline)),max(c(pad_rank_vec,tele_rank_vec,nuffin_baseline))),xlab='Delta',ylab='Average rank error')
lines(delta_vec,tele_rank_vec,'b',col='blue')
abline(h=nuffin_baseline, col='darkgreen')
legend('topleft',c('Padding','Teleport', 'No Change'),col=c('red','blue','darkgreen'),lty=1)
dev.off()
}
return(comparison_counts)
}
a <- method_comparison(years=5,delta_vec=seq(0.4,0.9,0.05),gender = 'm')
a <- method_comparison(years=10,delta_vec=seq(0.4,0.9,0.05),gender = 'm')
a <- method_comparison(years=10,delta_vec=seq(0.4,0.9,0.05),gender = 'w')
