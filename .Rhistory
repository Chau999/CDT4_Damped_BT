current_df[x,'outcome'],
theta))))
log_prob_tele <- sum(sapply(seq_len(nrow(current_df)), function(x) log(prob_generator(tele_pi[current_df[x,"Boat_1"]],
tele_pi[current_df[x,'Boat_2']],
current_df[x,'outcome'],
theta))))
pad_prob_vec <- c(pad_prob_vec, log_prob_pad)
no_pad_prob_vec <- c(no_pad_prob_vec,log_prob_no_pad)
tele_prob_vec <- c(tele_prob_vec , log_prob_tele)
log_mat <- matrix(c(pad_prob_vec,no_pad_prob_vec,tele_prob_vec),ncol=3)
}
if (plot==TRUE){
pdf('comparison.pdf',width=8,height=5,paper='special')
plot(seq(start,start+years), log_mat[,1],'b', col='red',ylim=c(min(log_mat),max(log_mat)),xlab='year',ylab='Log-likelihood',xaxt='n')
axis(1, at=seq(2008,2018,by=1), las=2)
lines(seq(start,start+years),log_mat[,2],'b',col='blue')
lines(seq(start,start+years),log_mat[,3],'b',col='green')
legend('bottomright',c('MAP','Padding','Teleport'),col=c('red','blue','green'),lty=1)
dev.off()
}
return(matrix(c(pad_prob_vec,no_pad_prob_vec),ncol=2))
}
pad_row <- function(years=5,from=2019, torpids=FALSE, draw=TRUE, cutoff=50, plot=FALSE, delta = 0.85, gender){
# get results dataframe first from given time period (from-years to from -1)
row_df <- dataGather(years,from=from,cutoff=cutoff,draw=draw,torpids=torpids, gender=gender)
if (draw==TRUE){
codes <- c('W1','W2','D')
} else{
codes <- c('W1', 'W2')
}
row_df_4col <- codes_to_counts(row_df, codes)
row_btdata <- btdata(row_df_4col,return_graph=plot)
# option to plot the graph
if (plot){
par(mar=c(0,0,0,0) + 0.1)
plot.igraph(row_btdata$graph, vertex.size=3, edge.arrow.size = 0.5)
}
row_pad <- as.matrix(row_btdata$wins)
avg_wins <- sum(row_pad)/nrow(row_pad)
# use rankings from prior_year
prior_year <- from - years
prior_year_df <- yeardf(prior_year,sex=gender,torp=torpids)
prior_year_df$ranking <- seq_len(nrow(prior_year_df))
currentBoats <- rownames(row_pad)
priorRanks <- prior_year_df[currentBoats,'ranking']
sortRanks <- sort(priorRanks, index.return= TRUE,na.last=TRUE)
index <- sortRanks$ix
ghostCol <- c()
ghostRow <- c()
ghostRow[index[!is.na(index)]] <- seq(0,1,length.out=length(which(!is.na(priorRanks))))
# set unseen boats to have average ability
ghostRow[which(is.na(priorRanks))] <- 1/2
ghostCol[index[(!is.na(index))]] <- seq(1,0,length.out=length(which(!is.na(priorRanks))))
ghostCol[which(is.na(priorRanks))] <- 1/2
ghostCol<- c(0,ghostCol)
pad <- avg_wins * 2 * (1/delta - 1)
row_pad <- cbind(ghostCol*pad, rbind(ghostRow*pad, row_pad))
rownames(row_pad)[1]='ghostShip'
colnames(row_pad)[1]='ghostShip'
return(row_pad)
}
# how about scrooge
scrooge <- function(m){
## Matrix m has its rows indexed by the "cited" items,
## and columns by "citing" items
## First convert m into a transition matrix, with column sums 1
column_totals <- colSums(m)
m_transition <- m / matrix(column_totals, 54, 54, byrow = TRUE)
## Now we get the eigenvector that corresponds to eigenvalue 1
## (the first eigenvalue, so we want the first column from the matrix of eigenvectors):
pagerank_vector <- (eigen(m_transition) $ vectors)[, 1]
## And then _scale_ the pagerank vector by the journals' out-citation counts,
## and then (arbitrarily) re-normalize to have mean 1:
pagerank_scaled <- pagerank_vector / column_totals
pagerank_scaled <- pagerank_scaled / mean(pagerank_scaled)
return(sort(log(pagerank_scaled),decreasing=TRUE)-mean(log(pagerank_scaled)))
}
method_comparison(10)
method_comparison(10,gender='w')
warnings()
method_comparison <- function(years=5, torpids=FALSE, draw=TRUE, cutoff=50, plot=TRUE, delta = 0.85,gender='m'){
pad_prob_vec <- c()
no_pad_prob_vec <- c()
tele_prob_vec<-c()
start = 2018-years
for (from_year in seq(start, start + years)){
print(from_year)
# get the unppadded data frame
no_pad_df <- dataGather(years=5,from=from_year,cutoff=cutoff, gender=gender,torpids=torpids)
no_pad_4_col <- codes_to_counts(no_pad_df,c('W1','W2','D'))
no_pad_btdata <- btdata(no_pad_4_col,return_graph=FALSE)
no_pad_fit <- btfit(no_pad_btdata, a = 1.1)
# get the padded win/loss matrix
pad_row_df <- pad_row(years=5,from=from_year, torpids=torpids, draw=draw, cutoff=cutoff, plot=FALSE, delta = delta, gender)
pad_btdata <- btdata(pad_row_df)
pad_fit <- btfit(pad_btdata, a=1)
# apply teleportation to the unpadded results
tele_wins<- teleporter(no_pad_df,delta,year=from_year-5,gender, torpids=torpids)
tele_btdata <- btdata(tele_wins)
tele_fit <- btfit(tele_btdata,a=1)
# get pi coefficients
pad_pi <- exp(coef(pad_fit))
no_pad_pi <- exp(coef(no_pad_fit))
coeffs<- coef(tele_fit)
# for some reason coeffs is sometimes a list
if (is.list(coef(tele_fit))){
coeffs <- coef(tele_fit)[[1]]
}
tele_pi <- exp(coeffs)
# observed draw prob, help us choose theta
draw_prob<-sum(no_pad_df[,'outcome']=='D')/nrow(no_pad_df)
theta = 2* draw_prob /(1-draw_prob)
# get new dataset to test predictive abilities of our models, remove data points for which we observe a new boat
current_df <- dataGather(years=1,from=from_year+1,cutoff=cutoff, gender=gender,torpids=torpids)
boatNames <- rownames(pad_row_df)
current_df <- current_df[current_df[,'Boat_1'] %in% boatNames & current_df[,'Boat_2'] %in% boatNames,]
# summed log probabilities for the three methods
log_prob_pad <- sum(sapply(seq_len(nrow(current_df)), function(x) log(prob_generator(pad_pi[current_df[x,"Boat_1"]],
pad_pi[current_df[x,'Boat_2']],
current_df[x,'outcome'],
theta))))
log_prob_no_pad <- sum(sapply(seq_len(nrow(current_df)), function(x) log(prob_generator(no_pad_pi[current_df[x,"Boat_1"]],
no_pad_pi[current_df[x,'Boat_2']],
current_df[x,'outcome'],
theta))))
log_prob_tele <- sum(sapply(seq_len(nrow(current_df)), function(x) log(prob_generator(tele_pi[current_df[x,"Boat_1"]],
tele_pi[current_df[x,'Boat_2']],
current_df[x,'outcome'],
theta))))
pad_prob_vec <- c(pad_prob_vec, log_prob_pad)
no_pad_prob_vec <- c(no_pad_prob_vec,log_prob_no_pad)
tele_prob_vec <- c(tele_prob_vec , log_prob_tele)
log_mat <- matrix(c(pad_prob_vec,no_pad_prob_vec,tele_prob_vec),ncol=3)
}
if (plot==TRUE){
name <- paste0(gender,'comparison.pdf')
pdf(name,width=8,height=5,paper='special')
plot(seq(start,start+years), log_mat[,1],'b', col='red',ylim=c(min(log_mat),max(log_mat)),xlab='year',ylab='Log-likelihood',xaxt='n')
axis(1, at=seq(2008,2018,by=1), las=2)
lines(seq(start,start+years),log_mat[,2],'b',col='blue')
lines(seq(start,start+years),log_mat[,3],'b',col='green')
legend('bottomright',c('MAP','Padding','Teleport'),col=c('red','blue','green'),lty=1)
dev.off()
}
return(matrix(c(pad_prob_vec,no_pad_prob_vec),ncol=2))
}
method_comparison(10,gender='w')
method_comparison(10,gender='m')
# get data from online http://eodg.atm.ox.ac.uk/user/dudhia/rowing/bumps/ and include padding to reflect ranking beliefs
# don't count bumps from lower divisions using cutoff, 65 corresponds to top 5 divisions
dataGather <- function(years = 1,from = 2019,torpids = FALSE,draw = TRUE, cutoff = 65, gender='m'){
df <- data.frame(Boat_1=character(),
Boat_2=character(),
outcome=character(),
stringsAsFactors=FALSE)
for (yearCount in seq_len(years)){
# organise the data from each year before adding to df
#print(paste0('Currently downloading data from the year: ', year))
year <- from - yearCount
yeardf <- yeardf(year, sex=gender,torp=FALSE)
boatVec <- rownames(yeardf)
# need to iterate through the boats on different days to update who's competing
for (day in 1:4){
dayString <- paste0('Day_',day)
newBoatVec <- c()
bumpBoatsdf <- yeardf[yeardf[dayString]!=0,]
boringBoatsdf <- yeardf[yeardf[dayString] ==0,]
boringBoats <- rownames(boringBoatsdf)
# sort out the bumps first
while(nrow(bumpBoatsdf)>0){
# for changing ii, remove the vanilla bumps (or overbumps for ii>1) that occur in the same division
for (ii in 1:10){
# check if a normal bump remains in bumpBoatsdf
while(grepl(paste(c(-ii,ii),collapse=";"),paste(bumpBoatsdf[,dayString],collapse=";"))){
# vector of boats who have changed position from the day's racing
bumpBoats <- rownames(bumpBoatsdf)
# find the first time we have -ii followed by ii in the race
bumpIndex <- which((bumpBoatsdf[,dayString]== -ii)& (c(bumpBoatsdf[seq(2,nrow(bumpBoatsdf)),dayString],0)==ii))[1]
loseBoat <- bumpBoats[bumpIndex]
winBoat <- bumpBoats[bumpIndex+1]
position <- which(rownames(yeardf)==loseBoat)
newBoatVec[position+ii] <- loseBoat
newBoatVec[position] <- winBoat
# add ii rows to the df in order to give overbumps more weighting
if (position < cutoff){
df[seq(nrow(df)+1,nrow(df)+ii),] <- matrix(rep(c(loseBoat, winBoat, 'W2'),each=ii, nrow=ii))
}
bumpBoatsdf <- bumpBoatsdf[-c(bumpIndex, bumpIndex+1),]
}
}
# now to deal with the dodgy cases
if (day==1 & from-year==2018 & torpids == FALSE & gender == 'm'){
mert <- 'Merton II'
hild <- "St Hilda's"
hert <- 'Hertford II'
linc <- 'Lincoln II'
df[nrow(df)+1,] <- c(mert,hild,'W2')
df[nrow(df)+1,] <- c(hert, linc, 'W2')
position <- which(rownames(yeardf)==mert)
newBoatVec[position] <- hild
newBoatVec[position + 1] <- linc
newBoatVec[position + 2] <- mert
newBoatVec[position + 3] <- hert
bumpBoatsdf <- bumpBoatsdf[!rownames(bumpBoatsdf) %in% c(hild,linc,mert,hert),]
}
# hopefully, bumpBoatsdf contains only the mess that is cross divisional bumps now
for (boat in rownames(bumpBoatsdf)){
change <- bumpBoatsdf[boat,dayString]
position <- which(rownames(yeardf)==boat)
newBoatVec[position-change] <- boat
# count all encounters from the loser's perspective
if (change<0){
index <-  which(rownames(bumpBoatsdf)==boat)
# find the bumper, this will be by definition the next boat in bumpBoatsdf that has >0 change
bumperIndex <- which(bumpBoatsdf[seq(index+1,nrow(bumpBoatsdf)),dayString]>0)[1]
bumper <- rownames(bumpBoatsdf)[bumperIndex + index]
position <- which(rownames(yeardf)==boat)
if (position < cutoff){
df[seq(nrow(df)+1,nrow(df)-change),] <- matrix(rep(c(bumper,boat,'W1'), each=-change), nrow= -change)
}
}
}
bumpBoatsdf <- data.frame()
}
# update the positions that haven't changed
newBoatVec[which(rownames(yeardf) %in% boringBoats)] <- boringBoats
# add draws to the dataframe if parameter selected
if (draw==TRUE){
boringPlaces=which(rownames(yeardf) %in% boringBoats)
drawIndices <- which(boringPlaces - c(boringPlaces[seq(2,length(boringPlaces))] ,-1) ==-1)
for (drawIndex in drawIndices){
boat1 <- rownames(yeardf)[boringPlaces[drawIndex]]
boat2 <- rownames(yeardf)[boringPlaces[drawIndex+1]]
position <- which(rownames(yeardf)==boat1)
if (position < cutoff){
df[nrow(df)+1,] <- c(boat1,boat2, 'D')
}
}
}
#rearrange in the new order
yeardf <- yeardf[newBoatVec,]
}
}
if (torpids==TRUE){
for (yearCount in seq_len(years)){
# organise the data from each year before adding to df
#print(paste0('Currently downloading data from the year: ', year))
year <- from - yearCount
yeardf <- yeardf(year, sex=gender,torp=TRUE)
boatVec <- rownames(yeardf)
# need to iterate through the boats on different days to update who's competing
for (day in 1:4){
dayString <- paste0('Day_',day)
newBoatVec <- c()
bumpBoatsdf <- yeardf[yeardf[dayString]!=0,]
boringBoatsdf <- yeardf[yeardf[dayString] ==0,]
boringBoats <- rownames(boringBoatsdf)
# sort out the bumps first
while(nrow(bumpBoatsdf)>0){
# for changing ii, remove the vanilla bumps (or overbumps for ii>1) that occur in the same division
for (ii in 1:10){
# check if a normal bump remains in bumpBoatsdf
while(grepl(paste(c(-ii,ii),collapse=";"),paste(bumpBoatsdf[,dayString],collapse=";"))){
# vector of boats who have changed position from the day's racing
bumpBoats <- rownames(bumpBoatsdf)
# find the first time we have -ii followed by ii in the race
bumpIndex <- which((bumpBoatsdf[,dayString]== -ii)& (c(bumpBoatsdf[seq(2,nrow(bumpBoatsdf)),dayString],0)==ii))[1]
loseBoat <- bumpBoats[bumpIndex]
winBoat <- bumpBoats[bumpIndex+1]
position <- which(rownames(yeardf)==loseBoat)
newBoatVec[position+ii] <- loseBoat
newBoatVec[position] <- winBoat
# add ii rows to the df in order to give overbumps more weighting
if (position < cutoff){
df[seq(nrow(df)+1,nrow(df)+ii),] <- matrix(rep(c(loseBoat, winBoat, 'W2'),each=ii, nrow=ii))
}
bumpBoatsdf <- bumpBoatsdf[-c(bumpIndex, bumpIndex+1),]
}
}
# now to deal with the dodgy cases
if (day==1 & from-year==2018 & torpids == FALSE & gender == 'm'){
mert <- 'Merton II'
hild <- "St Hilda's"
hert <- 'Hertford II'
linc <- 'Lincoln II'
df[nrow(df)+1,] <- c(mert,hild,'W2')
df[nrow(df)+1,] <- c(hert, linc, 'W2')
position <- which(rownames(yeardf)==mert)
newBoatVec[position] <- hild
newBoatVec[position + 1] <- linc
newBoatVec[position + 2] <- mert
newBoatVec[position + 3] <- hert
bumpBoatsdf <- bumpBoatsdf[!rownames(bumpBoatsdf) %in% c(hild,linc,mert,hert),]
}
# hopefully, bumpBoatsdf contains only the mess that is cross divisional bumps now
for (boat in rownames(bumpBoatsdf)){
change <- bumpBoatsdf[boat,dayString]
position <- which(rownames(yeardf)==boat)
newBoatVec[position-change] <- boat
# count all encounters from the loser's perspective
if (change<0){
index <-  which(rownames(bumpBoatsdf)==boat)
# find the bumper, this will be by definition the next boat in bumpBoatsdf that has >0 change
bumperIndex <- which(bumpBoatsdf[seq(index+1,nrow(bumpBoatsdf)),dayString]>0)[1]
bumper <- rownames(bumpBoatsdf)[bumperIndex + index]
position <- which(rownames(yeardf)==boat)
if (position < cutoff){
df[seq(nrow(df)+1,nrow(df)-change),] <- matrix(rep(c(bumper,boat,'W1'), each=-change), nrow= -change)
}
}
}
bumpBoatsdf <- data.frame()
}
# update the positions that haven't changed
newBoatVec[which(rownames(yeardf) %in% boringBoats)] <- boringBoats
# add draws to the dataframe if parameter selected
if (draw==TRUE){
boringPlaces=which(rownames(yeardf) %in% boringBoats)
drawIndices <- which(boringPlaces - c(boringPlaces[seq(2,length(boringPlaces))] ,-1) ==-1)
for (drawIndex in drawIndices){
boat1 <- rownames(yeardf)[boringPlaces[drawIndex]]
boat2 <- rownames(yeardf)[boringPlaces[drawIndex+1]]
position <- which(rownames(yeardf)==boat1)
if (position < cutoff){
df[nrow(df)+1,] <- c(boat1,boat2, 'D')
}
}
}
#rearrange in the new order
yeardf <- yeardf[newBoatVec,]
}
}
}
return(df)
}
dataGather(1)
dataGather(1,torpids=TRUE)
1 !%in% c(1,2)
# modularise the data gather function, make yeardf a separate function
yeardf <- function(year=2018, sex=gender, torp=torpids){
race <- ifelse(torp,'t','e')
yeardf <- data.frame(Day_1=numeric(),
Day_2=numeric(),
Day_3=numeric(),
Day_4=numeric(),
stringsAsFactors=FALSE)
eightsFile <-readLines(paste0('http://eodg.atm.ox.ac.uk/user/dudhia/rowing/bumps/', race, year,'/',race, year, sex, '.txt'))
# remove the first line
for (ii in seq(2, length(eightsFile))){
line <- eightsFile[ii]
# remove the lines without college races
if ((!grepl('=',line)) &&  (!grepl('\\(', line)) ){
line <- unlist(strsplit(line,'  '))
line <- line[which(line != '')]
# a particularly bad anomaly
if (year==2011 && line[1]=="St Antony's II"){
line<- c(line[seq_len(length(line)-1)],'-1','-1')
}
boatName <-line[1]
results <- tail(line,4)
yeardf[nrow(yeardf)+1,] <- results
rownames(yeardf)[nrow(yeardf)] <- boatName
}
}
yeardf$Day_1 <- as.numeric(yeardf$Day_1)
yeardf$Day_2 <- as.numeric(yeardf$Day_2)
yeardf$Day_3 <- as.numeric(yeardf$Day_3)
yeardf$Day_4 <- as.numeric(yeardf$Day_4)
return(yeardf)
}
dataGather(1,torpids=TRUE)
! c(1,2,3) %in% c(2,4,3)
years=1
from=2019
seq_len(1)
seq_len(1)[!seq_len(1)%in%c(from-2018,from-2014)]
dataGather(2,torpids=TRUE)
dataGather(2,torpids=FALSE)
dataGather(1,torpids=FALSE)
dataGather(2,torpids=TRUE)
years=10
seq_len(years)[!seq_len(years) %in% c(from-2018,from-2014)
]
# modularise the data gather function, make yeardf a separate function
yeardf <- function(year=2018, sex=gender, torp=torpids){
race <- ifelse(torp,'t','e')
yeardf <- data.frame(Day_1=numeric(),
Day_2=numeric(),
Day_3=numeric(),
Day_4=numeric(),
stringsAsFactors=FALSE)
eightsFile <-readLines(paste0('http://eodg.atm.ox.ac.uk/user/dudhia/rowing/bumps/', race, year,'/',race, year, sex, '.txt'))
# remove the first line
for (ii in seq(2, length(eightsFile))){
line <- eightsFile[ii]
# remove the lines without college races
if ((!grepl('=',line)) &&  (!grepl('\\(', line)) ){
line <- unlist(strsplit(line,'  '))
line <- line[which(line != '')]
# a particularly bad anomaly
if (year==2011 && line[1]=="St Antony's II"){
line<- c(line[seq_len(length(line)-1)],'-1','-1')
}
boatName <-line[1]
results <- tail(line,4)
yeardf[nrow(yeardf)+1,] <- results
rownames(yeardf)[nrow(yeardf)] <- boatName
}
}
yeardf$Day_1 <- as.numeric(yeardf$Day_1)
yeardf$Day_2 <- as.numeric(yeardf$Day_2)
yeardf$Day_3 <- as.numeric(yeardf$Day_3)
yeardf$Day_4 <- as.numeric(yeardf$Day_4)
return(yeardf)
}
# get data from online http://eodg.atm.ox.ac.uk/user/dudhia/rowing/bumps/ and include padding to reflect ranking beliefs
# don't count bumps from lower divisions using cutoff, 65 corresponds to top 5 divisions
dataGather <- function(years = 1,from = 2019,torpids = FALSE,draw = TRUE, cutoff = 65, gender='m'){
df <- data.frame(Boat_1=character(),
Boat_2=character(),
outcome=character(),
stringsAsFactors=FALSE)
for (yearCount in seq_len(years)){
# organise the data from each year before adding to df
#print(paste0('Currently downloading data from the year: ', year))
year <- from - yearCount
yeardf <- yeardf(year, sex=gender,torp=FALSE)
boatVec <- rownames(yeardf)
# need to iterate through the boats on different days to update who's competing
for (day in 1:4){
dayString <- paste0('Day_',day)
newBoatVec <- c()
bumpBoatsdf <- yeardf[yeardf[dayString]!=0,]
boringBoatsdf <- yeardf[yeardf[dayString] ==0,]
boringBoats <- rownames(boringBoatsdf)
# sort out the bumps first
while(nrow(bumpBoatsdf)>0){
# for changing ii, remove the vanilla bumps (or overbumps for ii>1) that occur in the same division
for (ii in 1:10){
# check if a normal bump remains in bumpBoatsdf
while(grepl(paste(c(-ii,ii),collapse=";"),paste(bumpBoatsdf[,dayString],collapse=";"))){
# vector of boats who have changed position from the day's racing
bumpBoats <- rownames(bumpBoatsdf)
# find the first time we have -ii followed by ii in the race
bumpIndex <- which((bumpBoatsdf[,dayString]== -ii)& (c(bumpBoatsdf[seq(2,nrow(bumpBoatsdf)),dayString],0)==ii))[1]
loseBoat <- bumpBoats[bumpIndex]
winBoat <- bumpBoats[bumpIndex+1]
position <- which(rownames(yeardf)==loseBoat)
newBoatVec[position+ii] <- loseBoat
newBoatVec[position] <- winBoat
# add ii rows to the df in order to give overbumps more weighting
if (position < cutoff){
df[seq(nrow(df)+1,nrow(df)+ii),] <- matrix(rep(c(loseBoat, winBoat, 'W2'),each=ii, nrow=ii))
}
bumpBoatsdf <- bumpBoatsdf[-c(bumpIndex, bumpIndex+1),]
}
}
# now to deal with the dodgy cases
if (day==1 & from-year==2018 & torpids == FALSE & gender == 'm'){
mert <- 'Merton II'
hild <- "St Hilda's"
hert <- 'Hertford II'
linc <- 'Lincoln II'
df[nrow(df)+1,] <- c(mert,hild,'W2')
df[nrow(df)+1,] <- c(hert, linc, 'W2')
position <- which(rownames(yeardf)==mert)
newBoatVec[position] <- hild
newBoatVec[position + 1] <- linc
newBoatVec[position + 2] <- mert
newBoatVec[position + 3] <- hert
bumpBoatsdf <- bumpBoatsdf[!rownames(bumpBoatsdf) %in% c(hild,linc,mert,hert),]
}
# hopefully, bumpBoatsdf contains only the mess that is cross divisional bumps now
for (boat in rownames(bumpBoatsdf)){
change <- bumpBoatsdf[boat,dayString]
position <- which(rownames(yeardf)==boat)
newBoatVec[position-change] <- boat
# count all encounters from the loser's perspective
if (change<0){
index <-  which(rownames(bumpBoatsdf)==boat)
# find the bumper, this will be by definition the next boat in bumpBoatsdf that has >0 change
bumperIndex <- which(bumpBoatsdf[seq(index+1,nrow(bumpBoatsdf)),dayString]>0)[1]
bumper <- rownames(bumpBoatsdf)[bumperIndex + index]
position <- which(rownames(yeardf)==boat)
if (position < cutoff){
df[seq(nrow(df)+1,nrow(df)-change),] <- matrix(rep(c(bumper,boat,'W1'), each=-change), nrow= -change)
}
}
}
bumpBoatsdf <- data.frame()
}
# update the positions that haven't changed
newBoatVec[which(rownames(yeardf) %in% boringBoats)] <- boringBoats
# add draws to the dataframe if parameter selected
if (draw==TRUE){
boringPlaces=which(rownames(yeardf) %in% boringBoats)
drawIndices <- which(boringPlaces - c(boringPlaces[seq(2,length(boringPlaces))] ,-1) ==-1)
for (drawIndex in drawIndices){
boat1 <- rownames(yeardf)[boringPlaces[drawIndex]]
boat2 <- rownames(yeardf)[boringPlaces[drawIndex+1]]
position <- which(rownames(yeardf)==boat1)
if (position < cutoff){
df[nrow(df)+1,] <- c(boat1,boat2, 'D')
}
}
}
#rearrange in the new order
yeardf <- yeardf[newBoatVec,]
}
}
return(df)
}
